title: End to End Async
---

In the link:async.html[Async] discussion, there was a stage where the asynchronous
request handler had to be converted into a normal, blocking, synchronous handler.

That's a shame, as it means that the number of request handling threads started by
Jetty is a limiting factor on how many simultaneous requests can be processed.

By switching dependency from ring/ring-jetty-adapter to cc.qbits/jet (link:https://github.com/mpenet/jet[Jet]),
you can have the best of both worlds.

Jet uses Jetty version 9 (ring-jetty-adapter uses Jetty 7). It enables the use of asynchronous processing:
handlers have the option a core.async channel containing a Ring response map, which aligns with
Rook's asynchronous pipeline.

Jet initializes slightly differently than Ring:

[source,clojure]
----
(ns org.example.server-async
  (:require
    [qbits.jet.server :as jet]
    [io.aviso.rook :as rook]
    [io.aviso.rook.async :as async])

(defn start-server
   [port]
   (let [handler (-> (rook/namespace-handler
                       {:async? true}
                       ["users" 'org.example.resources.users])
                      ;; Note use of async variation here:
                      async/wrap-with-standard-middleware)]
     (jet/run-jetty {:port port
                     :join? false
                     :ring-handler handler})))
----

== Timeouts

Function io.aviso.rook.server/wrap-with-timeout wraps an asynchronous Ring handler with a timeout.

A request that is not processed before the timeout is sent an 504 Gateway Timeout response.

The timeout is managed using a core.async channel; this channel is stored in the request
as key :timeout-ch. If you have long running operations that should terminate if the request
as a whole times out, you can use this channel to determine when the request has timed out. footnote:[As with
any core.async timeout channel, *never* close this channel explicitly.]

[source,clojure]
----
(ns org.example.server-async-timeout
  (:require
    [qbits.jet.server :as jet]
    [io.aviso.rook :as rook]
    [io.aviso.rook.server :as server]
    [io.aviso.rook.async :as async])

(defn start-server
   [port]
   (let [handler (-> (rook/namespace-handler
                       {:async? true}
                       ["users" 'org.example.resources.users])
                      ;; Must be inside the standard middleware:
                      (server/wrap-with-timeout 10000)
                      ;; Includes wrap-restful-format:
                      async/wrap-with-standard-middleware)]
     (jet/run-jetty {:port port
                     :join? false
                     :ring-handler handler})))
----

== Wrapping Synchronous Handlers

The function io.aviso.rook.async/ring-handler->async-handler can be used
to wrap a synchronous handler as an asynchronous handler. This may is useful when
you application exposes a RESTful API, but also contains a normal web application
(including, perhaps, the use of link:../twixt/[Twixt]).

Jet is smart about responses: when the response is a channel, it will take the value
from the channel and expect that to be the true response map. This gives you a bit of flexibility
to divide the URI space into asynchronous Rook portions, and traditional (synchronous) sections.