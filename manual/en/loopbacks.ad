title: loopbacks
---

Rook encourages you to write a RESTful API based on resources; that's the whole point
of the mapping of namespaces to resources.

It is frequently the case that different resources must cooperate; for example,
it is common to have authentication be a part of an application, and that authentication
takes the form of middleware that must check data in the incoming request
against an external database of users and passwords.

One approach would be to have the middleware use JDBC to read user and password
data from the database.

A better approach would be to have the authentication middleware be a client of
the users resource, interacting with the resource in just exactly the same way
as an external client would.

This better approach has plusses and minuses.

On the plus side:

* The application becomes a consumer of other parts of the application footnote:[Eating
your own dogfood is always a great way to ensure the system will work for clients as well]. 
* JDBC access logic for a given database entity is consolidated in a single place; the corresponding REST resource.
* Caching that is integrated into the resource will be used by the application; direct JDBC access could easily bypass caches.

On the minus side:

* There is a cost in creating an HTTP request and awaiting the HTTP response footnote:[This includes the actual network time, plus the resources to encode and decode the stream to and from Clojure data].
* The cost can go up considerably when HTTPS is part of the solution, as it should be.
* The library used to peform the HTTP request, such as link:https://github.com/dakrone/clj-http[clj-http], is likely synchronous and blocking, negating the advantage of Rook's async support.

To keep the pluses, and defuse the minuses, Rook includes the concept of a *loopback*.

The loopback is an entry point back into the same asynchronous request handler, it is introduced via the io.aviso.rook/async/wrap-with-loopback middleware, which will wrap
_around_ the namespace handler.

The loopback handler places a new key into the Ring request, :loopback-handler. 
This is a special asynchronous Ring handler; it accepts a partial Ring request map
and returns a channel to a Ring response map.

The loopback is designed to work in concert with the io.aviso.rook.client namespace; 
client provides a way to construct a new asynchronous Ring request around a handler
exactly like the loopback.

== Setting Up the Loopback

The loopback is created simply by using wrap-with-loopback.

.Example
[source,clojure]
----
(-> (namespace-handler {:async? true
                        :default-middleware wrap-with-password-check}
     [["users"] org.example.resources.users]
     [["orders"] org.example.resources.orders]
     ...)
     async/wrap-with-loopback
     async/wrap-with-standard-middleware))
----

Obviously, a real example would include more resources and more middleware.

It's important that the standard middleware (responsible for parsing JSON or EDN into Clojure data) be _outside_ the loopback.

== Invoking the Loopback

.Example
[source,clojure]
----
(defn wrap-with-password-check
  [handler metadata]
  (fn [request]
    (async/safe-go request
      (-> request
          (rook/get-injection :loopback-handler)
          client/new-request
          (client/to :get :users (-> request :params :user-id))
          (client/with-parameters {:password (-> request :params :password)})
          client/send
          (client/then 
            :pass-failure
            :success [{user :body} (-> request (assoc :user user) handler <!)])))))
----

This looks daunting, but breaks down nicely.

Because this is a asynchronous middleware, it must return an asynchronous handler.
That's accomplished with the async/safe-go call.

The next few lines extract the :loopback-handler from the Ring request, and build
a new client request.

client/to is used to identify the method and the URI of the request.

client/with-parameters specifies query parameters.

client/send passes the assembled Ring request map to the handler and returns a channel
that will receive the response map.

client/then is used to wait for that response and act upon it.  Any failure response
passes through as-is (presumably, passing an invalid password will result in a 401 response).

Any success response (a 2xx) will trigger the following block. 
The first form will be assigned the Ring response map, and we're using destructuring
to get the body of the response and call it user.

Finally, we pass a modified request to the handler, identifying the authenticated user to it. 

The final <! is used to park until the handler's response is available in the channel; it must be pulled out so that it can be implicity put into the channel provided by the safe-go block.


