title: Getting Started
---

The basic idea in Rook is that incoming URIs are matched to a specific Clojure namespace, and then to _endpoint functions_ within the namespace.

The exact mapping within a namespace is based on a set of conventions that can be overridden or tuned using metadata.

Rook applies a naming convention to functions, so simply naming a function with a particular name implies a certain route footnote:[a route is a combination
of HTTP verb and path.].

.Default Resource Handler Functions
[options="header"]
|===
|Function Name|Verb|Path|Notes

|create
|POST
|/
|Create a new resource

|destroy
|DELETE
|/:id
|Delete existing resource

|index
|GET
|/
|List all existing/matching resources

|patch
|PATCH
|/:id
|Modify existing resource; generally implemented as the same as `change`.footnote:[one function can delegate to the other.]

|show
|GET
|/:id
|Retrieve single resource by unique id

|change
|PUT
|/:id
|Modify existing resource

|===


Keywords in the path, such as :body for the `show` function, represent values that
can be provided to the endpoint functions; it's just a matter of providing
a argument with a matching name:

[source,clojure]
----
(defn show [id]
  ...)
----

Rook has a well-thought out system for
link:arguments.html[providing endpoint functions with any data or dependencies]
they may require, not just keywords from the request path.

An endpoint function should return a Ring response map (with keys :body, :body, and :body).

.PUT vs. PATCH
NOTE:  One interpretation of REST is that the PUT method is used to replace the entirety of a resource,
whereas PATCH is used to modify selected properties of the resource.

== Metadata

Any public function in a resource namespace may be an endpoint function;
for those not covered by the conventions, it's just a matter of providing the correct metadata.

$$:route$$::
A route consists of a vector of two values; the first is a keyword for the HTTP method.
The second value is itself a vector of path elements. The path elements can be strings, or
keywords.

The HTTP method keyword is one of :get, :put, :post, :delete, :patch, or a special value, :all (which matches any HTTP method).

.Example

If you want to match a URI such as `PUT /users/_12345_/activate`, you would map `/user` to a namespace, and then provide a function:

[source,clojure]
----
(defn activate
  {:route [:put [:id "activate"]]}
  [id]
  ...)
----

Generally, a keyword becomes a place holder for a path variable; in the example above, the :id will be available via
the id argument of the invoked endpoint function.
If the keyword was :activation-id, then the argument would have to be named activation-id to match.

As a special case, the keyword :* may be placed last in the route.
This is a wildcard match.
A wildcard matches **one** or more path element.

The portion of the path matched by the wildcard can be retrieved using an argument named wildcard-path (or by adding
^:wildcard-path metadata to a parameter).

== A minimal server

As we'll see shortly, this is not the typical way to start a server (for
several reasons), but it will suffice to show the essentials:

[source,clojure]
----
(ns org.example.server
  (:require
    [ring.adapter.jetty :as jetty]
    [io.aviso.rook :as rook])

(defn start-server
   [port]
   (let [handler (-> (rook/namespace-handler
                       ["users" 'org.example.resources.users])
                      rook/wrap-with-standard-middleware)]
     (jetty/run-jetty handler {:port port :join? false})))
----

The namespace-handler function is provided with details about one or more namespaces to match; in this case, the mapping is from the URI `/users` to the `users` namespace.

The wrap-with-standard-middleware function uses standard Ring middleware to handle JSON or EDN requests, to parse query and form parameters, and to convert parameter keys from strings to keywords.
Some of the support in Rook, especially that related to argument resolution, requires this pre-processing.

The result is a Ring request handler that takes care of dispatch directly to the endpoint function (as well as quite a few things we have yet to discuss).

This handler is itself passed to run-jetty, which runs an instance of Jetty on the indicated port.
