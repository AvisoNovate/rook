title: Versioning
---

Normally, routes (the combination of an HTTP method and a URI) are mapped to a single endpoint function.
That's great initially, but what happens if you want to do content negotiation or API versioning?

The quick summary: you _can_ have more than one endpoint function for a single route *BUT*
you must also provide a way to narrow it down to exactly one (or none) for any particular request.

This is accomplished using the :match metadata on the endpoint.
Like all metadata, it can be inherited from the namespace and overridden by the endpoint.

The value is a function that accepts a Ring request map and returns true or false.

Since it has access to the complete Ring request, the matching function can examine headers, query parameters, and
any other normal Ring request key.

[source,clojure]
----
(ns org.examples.resources.widgets)

(defn- match-v1
 [request]
 (-> request (get-in [:params :v]) (= "1")))

(defn- match-v2
 [request]
 (-> request (get-in [:params :v]) (= "2")))

(defn create-v1
  {:route [:post []]
   :match match-v1}
  [params ...]
  ...)

(defn create
  {:match match-v2}
  [params ...]
  ...)
----

When a request for POST /widgets arrives, both create-v1 and create match.
Rook will run the :match meta data on each one and keep the endpoints that return true.

TIP: In practice, it is probably better to name the second function create-v2, and provide
explicit :route metadata (rather than rely on the convention) as that will make it much more
obvious which endpoints are versioned.

In the above example, the `v` query parameter must be present, and must be either "1" or "2".

On any other value, or if `v` is omitted from the query, then neither endpoint will match, and
Rook will return a 404 Not Found response.

