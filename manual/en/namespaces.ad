title: Namespaces
---

In Rook, an application is a collection of resources; each resource is mapped to a
namespace and the functions within that namespace.

The io.aviso.rook/namespace-handler function is responsible for the mapping.

It is passed a collection of namespace specifications and returns a single Ring request handler.
The handler will interrogate the Ring request's :uri and :request-method keys,
identify the exact endpoint function for the request,
and invoke that function, passing the link:arguments.html[appropriate arguments].

As a side note: each endpoint function (a function of many arguments)
will be encapsulated as a Ring request handler (of function of a single argument, the Ring request map),
then wrapped with a link:middleware.html[specific set of middleware].

= Namespace mapping by example

The end-game for namespaces and namespace-handler is for everything to be succinct, self-describing, and agile
(easy to change and evolve).
However, that means a lot of flexibility and assumptions.
We'll start with something very verbose, and simplify it as we go.

== Starting verbosely

Our starting example is a hotels resource, with a nested rooms resource.
Each of these will be a its own namespace, plus a third namespace to define the handler.

We'll just do the basics: an endpoint in each namespace to create a new resource instance, or view and existing
resource instance.

[source,clojure]
.service.clj
----
(ns ex.service
  (:require [io.aviso.rook :as rook]))

(defn create-handler
  [hotel-db]
  (let [arg-resolvers {'hotel-db (constantly hotel-db)}]
      (rook/namespace-handler {}
        ['ex.hotels arg-resolvers]
        ['ex.rooms arg-resolvers])))
----

For the endpoint functions to operate, they'll need a access to the hotel database; this is provided as
an argument resolver function: a function that accepts the Ring request map (ignored in this case) and returns the value
for the argument.

The argument resolvers map provided for each namespace is merged into the link:arguments.html[default argument resolvers map].

After that, it's a matter of identifying each of the namespaces.

If there was another namespace that didn't need the hotel-db argument, then the map after the namespace
symbol could be skipped.

Let's see what our resource namespaces look like:

[source,clojure]
.hotels.clj
----
(ns ex.hotels
    (:require ...))

(defn create-hotel
  {:route [:post ["api" "hotels"]]}
  [hotel-db params]
  ...)

(defn list-hotels
  {:route [:get ["api" "hotels"]]}
  [hotel-db]
  ...)

(defn show-hotel
  {:route [:get ["api" "hotels" :id]]}
  [hotel-db id]
  ...)
----

We've elided all the details not essential to Rook.
Mostly, we identify which incoming routes match which endpoint functions (using the :route metadata).
The parameters to our methods identify what argument values we expect to receive.

For function create-hotel, we need the hotel-db and the params map (which contains the data posted to the
in the request).  params is one of the built-in link:arguments.html[argument convention names].

For function list-hotels, we just need the hotel-db.

To show a single hotel, we identify where the hotel's id appears in the URI, using a keyword (a context contains
either strings or keywords).

The :id keyword is automatically available as the id argument.

[source,clojure]
.rooms.clj
----
(ns ex.rooms
    (:require ...))

(defn create-room
  {:route [:post ["api" "hotels" :hotel-id "rooms"]]}
  [room-db hotel-id params]
  ...)

(defn list-rooms
  {:route [:get ["api" "hotels" :hotel-id "rooms"]]}
  [room-db hotel-id]
  ...)

(defn show-room
  {:route [:get ["api" "hotels" :hotel-id "rooms" :id]]}
  [room-db hotel-id id]
  ...)
----

Rooms are intended to be nested within a specific hotel instance, with a URI resembling "/api/hotels/378381/rooms/237".
You can see why the hotel-id is needed ... there might be a room 237 in many hotels; it is not unique enough
unless qualified by the hotel containing it.

== Removing route redundancy

You should have noticed that there's quite a bit of duplication across functions and between namespaces.

We can fix that.  We'll start in our call to rook/namespace-handler.

First off, it is possible to provide an option that sets a root context for all namespaces.

Secondly, before each namespace symbol we can provide a context specific to that namespace.

[source,clojure]
.service.clj
----
(ns ex.service
  (:require [io.aviso.rook :as rook]))

(defn create-handler
  [hotel-db]
  (let [arg-resolvers {'hotel-db (constantly hotel-db)}]
    (rook/namespace-handler {:context ["api"]}
      [["hotels"] 'ex.hotels arg-resolvers]
      [["hotels" :hotel-id "rooms"] 'ex.rooms arg-resolvers])))
----

[source,clojure]
.hotels.clj
----
(ns ex.hotels
    (:require ...))

(defn create-hotel
  {:route [:post []]}
  [hotel-db params]
  ...)

(defn list-hotels
  {:route [:get []]}
  [hotel-db]
  ...)

(defn show-hotel
  {:route [:get [:id]]}
  [hotel-db id]
  ...)
----

[source,clojure]
.rooms.clj
----
(ns ex.rooms
    (:require ...))

(defn create-room
  {:route [:post []]}
  [room-db hotel-id params]
  ...)

(defn list-rooms
  {:route [:get []]}
  [room-db hotel-id]
  ...)

(defn show-room
  {:route [:get [:id]]}
  [room-db hotel-id id]
  ...)
----

So you can see that the :route meta data for each endpoint is actually just an extension of the context provided for the entire namespace.

This is a common pattern in Rook; the containers provide a base line, and things inside the container extend the base line
with additional (or overriding) data.

== Nesting namespaces

By nesting namespaces, the nested namespaces can share context, argument resolvers, and the
link:middleware.html[middleware function] for the namespace (something we haven't shown here yet).

This lets us tighten up our create-handler function:

[source,clojure]
.service.clj
----
(ns ex.service
  (:require [io.aviso.rook :as rook]))

(defn create-handler
  [hotel-db]
  (rook/namespace-handler {:context ["api"]}
    ["hotels" 'ex.hotels {'hotel-db (constantly hotel-db)}
      [[:hotel-id "rooms"] 'ex.rooms]])))
----

When a context is just a single string value, then it may be abbreviated as that string (not a vector
containing a string, through that is also valid).

So the ex.rooms namespace will inherit the argument resolver map from the ex.hotels namespace.
It also inherits the context, ["api" "hotels"], from the ex.hotels namespace, which it then extends
with [:hotel-id "rooms"].

If the ex.rooms namespace needed additional argument resolvers, those could be provided as a map following
the ex.room symbol; such a map would be merged on top of the argument resolver map for the ex.hotels namespace.

== Leveraging naming conventions

Rook has some naming conventions built in that let you omit metadata for common endpoint functions.

[source,clojure]
.hotels.clj
----
(ns ex.hotels
    (:require ...))

(defn create
  [hotel-db params]
  ...)

(defn index
  [hotel-db]
  ...)

(defn show
  [hotel-db id]
  ...)
----

[source,clojure]
.rooms.clj
----
(ns ex.rooms
    (:require ...))

(defn create
  [room-db hotel-id params]
  ...)

(defn index
  [room-db hotel-id]
  ...)

(defn show
  [room-db hotel-id id]
  ...)
----

Using the naming conventions ensure consistency across namespaces.

These functions can still have their own metadata where needed; it's just merged with a :route metadata, associated
with the convention name.

= Order of specification elements

As shown in the above examples, what goes into a namespace specification is quite flexible.

More precisely, a namespace specification is a vector that consists of the following optional and required elements:

* The context for the namespace as a string, or a vector of strings and keywords (optional)
* The symbol identifying the namespace (required)
* A map of argument resolvers for the namespace (optional)
* The endpoint middleware function for the namespace (optional)
* Any number of nested namespace specifications (optional)

The elements must be in the specified order, but omitted elements may be skipped.