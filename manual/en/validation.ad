title: Validation
---

Rook is capable of validating incoming requests and outgoing responses, using
specific link:middleware.html[middleware] combine with metadata.

Input validation is useful not only to protect your endpoints from invalid inputs, but also because it leverages
Schema's link:https://github.com/Prismatic/schema#transformations-and-coercion[coercion] logic to ensure that content passed from the client, especially JSON
content, is in good form when it is passed into your endpoint function.


Schema validation is enabled by including the +io.aviso.rook.schema-validation/wrap-with-schema-validation+ endpoint middleware function.

== Query Parameter Validation

The :query-schema metadata key is a schema that applies to the incoming request,
specifically to the :query-params key.

[source,clojure]
----
(s/defschema IndexParameters
  {(s/optional-key :sort)  (s/enum :name :date)
   (s/optional-key :order) (s/enum :ascending :descending)
   s/Any                   s/Any})

(defn index
  "Lists out all hotel rooms, sorted by name or date."
  {:schema IndexParameters}
  [^:injected db-conn
   {sort-key :sort
    sort-order :order
    :as params}]
    ...
  )
----

By convention, the schema is defined in its own symbol, then used in the metadata of the related endpoint function.
The s namespace is Prismatic's schema.core.

NOTE: The schema should be forgiving (that's the +s/Any+ key mapping). This is because the client may include
arbitrary query parameters in the URL that should be ignored by the server; failing to include the +s/Any+ mapping
can result in spurious rejections of otherwise valid requests.

For query parameters, Rook will convert the keys in the :query-params map to keywords (where possible) before passing
the map through the coercion and validation stages.

Schema handles basic coercion; for example JSON  doesn't have a way to specify that values are keywords, not strings.
Schema can see that the enum type is of keywords, and automatically coerce a string, such as "ascending" to a keyword, :ascending.

NOTE: Rook adds coercion for s/Uuid and s/Inst (instant of time) that is not, by default, present in Schema.


After succesful validation, the parameters map is updated back in to the request; in addition, the :params key of the request
is rebuild (from :query-params, :form-params, and :body-params).

Schema doesn't have a good way to identify relationships between the keys; for instance, :order without :sort isn't meaningful.
In this simple example, it can be simply ignored, but in other cases, you may need logic inside
your endpoint function to cross-validate parameter values.

== Body Validation

Validation of the body is essentially the same.  The :body-params request key is validated against the :body-schema
metadata (when present).

Unlike query parameters, body parameters are not keyword-ized; this is simply not necessary, because Rook's standard middleware
uses the :json-kw format, which takes care of that automatically.

== JSON vs. EDN

Rook takes the approach that you will use a single end-point for both JSON and EDN data.
The schema you provide should work regardless of whether the incoming stream is in application/json or application/edn formats.

Obviously, the EDN format is far richer than the JSON format.

If you really need to support both, you may have to split into two endpoints with different schemas.

== Access via Arguments

In the request, the :params key is the merged set of all data submitted via query parameters, or as an HTML form submission,
or as the request body.

The link:arguments.html[argument convention] `params` is resolved to that data, as in the example above.

A second convention, `params*`, is the same data, but with JSON-style keywords (:first_name) converted to Clojure
style (:first-name).

== Response Validation

Response validation allows checks on the result of the endpoint function:

* The response status is a declared value

* That the response body matches a provided schema

Response validation is typically enabled in development and some testing, but disabled in production.

WARNING: It's a good idea to have at least some of your unit tests work by sending real HTTP requests
into the resource (or, at least, to instantiate a namespace handler and pass Ring request maps into it).
This ensures that middleware, such as response validation, is applied and accurate.

Response validation is enabled using the +io.aviso.rook.response-validation/wrap-with-response-validation+
endpoint middleware.

The :responses metadata is a map from status code to a schema.

[source,clojure]
----
(def ^:private index-schema
  {(s/optional-key :sort)  (s/enum :name :date)
   (s/optional-key :order) (s/enum :ascending :descending)
   s/Any                   s/Any})

(def ^:private index-responses
  {HttpServletResponse/SC_OK        {:rooms [room-schema]}
   HttpServletResponse/SC_FORBIDDEN nil})

(defn index
  "Lists out all hotel rooms, sorted by name or date."
  {:query-schema    index-schema
   :responses       index-responses}
  [^:injected db-conn
   {sort-key :sort
    sort-order :order
    :as params}]
    ...
  )
----

Again, by convention, the responses are stored in a separate symbol.

The index function must return either SC_OK (200) or SC_FORBIDDEN (403).

For the SC_OK case, the body must have a :rooms key containing an array of rooms (each defined by
rooms-schema, not shown).

For the SC_FORBIDDEN case, the body may be omitted, or have any value. 
The body is not validated (because the schema associated with SC_FORBIDDEN is nil).

Any response with a 5xx status code is passed through unchanged and unvalidated. 
It is not necessary or helpful to list such status codes.

A response that is not otherwise listed in the :responses metadata is logged, and converted into a SC_INTERNAL_SERVER_ERROR (500) response.

== Swagger Support

Rook's link:swagger.html[Swagger support] uses the :query-schema and :body-schema metadata to document query parameters
and the submitted request body.
